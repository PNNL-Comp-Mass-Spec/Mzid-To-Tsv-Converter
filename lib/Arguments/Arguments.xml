<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arguments</name>
    </assembly>
    <members>
        <member name="T:Arguments.Argument">
            <summary>
            An individual argument.
            </summary>
        </member>
        <member name="M:Arguments.Argument.#ctor(Arguments.ArgumentProcessor)">
            <summary>
            Initializes a new instance of the<see cref="T:Arguments.Argument" /> class.
            </summary>
            <param name="arguments">The set of arguments from which the argument originated.</param>
        </member>
        <member name="P:Arguments.Argument.Action">
            <summary>
            The action to perform when the argument is specified.
            </summary>
        </member>
        <member name="P:Arguments.Argument.Arguments">
            <summary>
            The set of arguments from which the argument originated.
            </summary>
        </member>
        <member name="P:Arguments.Argument.Flags">
            <summary>
            The possible flags used to denote the argument.
            </summary>
        </member>
        <member name="P:Arguments.Argument.Target">
            <summary>
            Gets or sets the argument action target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Arguments.Argument.TerminateAfterExecution">
            <summary>
            Determines if additional arguments should be processed if this argument is encountered and executed.
            </summary>
        </member>
        <member name="T:Arguments.ArgumentProcessor">
            <summary>
            Processes the arguments.
            </summary>
        </member>
        <member name="M:Arguments.ArgumentProcessor.#ctor(System.String[],System.Collections.Generic.IEnumerable{Arguments.IArgument})">
            <summary>
            Initializes a new instance of the <see cref="T:Arguments.ArgumentProcessor" /> class.
            </summary>
            <param name="source">The source arguments.</param>
            <param name="arguments">Arguments to process.</param>
        </member>
        <member name="M:Arguments.ArgumentProcessor.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the<see cref="T:Arguments.ArgumentProcessor" /> class.
            </summary>
            <param name="source">The source arguments.</param>
        </member>
        <member name="M:Arguments.ArgumentProcessor.#ctor">
            <summary>
            Initializes a new instance of the<see cref="T:Arguments.ArgumentProcessor" /> class.
            </summary>
        </member>
        <member name="P:Arguments.ArgumentProcessor.Arguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:Arguments.ArgumentProcessor.Source">
            <summary>
            The source arguments.
            </summary>
        </member>
        <member name="P:Arguments.ArgumentProcessor.ArgumentSeparators">
            <summary>
            The strings separating the arguments.
            </summary>
        </member>
        <member name="P:Arguments.ArgumentProcessor.ParameterSeparator">
            <summary>
            The character that separates the flag from the parameter.
            </summary>
        </member>
        <member name="M:Arguments.ArgumentProcessor.Process">
            <summary>
            Executes the action on each of the arguments encountered.
            </summary>
            <returns>The processed arguments.</returns>
        </member>
        <member name="M:Arguments.ArgumentProcessor.Initialize(System.String[],System.Collections.Generic.IEnumerable{Arguments.IArgument})">
            <summary>
            Initializes a new instance of <see cref="T:Arguments.ArgumentProcessor" /> class with the specified source arguments and injected arguments.
            </summary>
            <param name="source">The source arguments.</param>
            <param name="arguments">Arguments to inject.</param>
            <returns>The arguments with the specified source arguments and injected arguments.</returns>
        </member>
        <member name="M:Arguments.ArgumentProcessor.Initialize(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Arguments.ArgumentProcessor" /> class with the specified source arguments.
            </summary>
            <param name="source">The source arguments.</param>
            <returns>The arguments with the specified source arguments.</returns>
        </member>
        <member name="T:Arguments.FluentExtensions">
            <summary>
            Extension methods to support fluent interaction of arguments.
            </summary>
        </member>
        <member name="M:Arguments.FluentExtensions.AddArgument``1(Arguments.ArgumentProcessor,System.Action{``0,System.String},``0)">
            <summary>
            Adds an <see cref="T:Arguments.Argument" />.
            </summary>
            <typeparam name="TTarget">The type of the argument action target.</typeparam>
            <param name="argumentProcessor">The <see cref="T:Arguments.ArgumentProcessor" /></param>
            <param name="action">The action.</param>
            <param name="target">The target.</param>
            <returns>Argument.</returns>
        </member>
        <member name="M:Arguments.FluentExtensions.AddArgument(Arguments.ArgumentProcessor,System.Action{System.String})">
            <summary>
            Adds an <see cref="T:Arguments.Argument" />.
            </summary>
            <param name="argumentProcessor">The <see cref="T:Arguments.ArgumentProcessor" /></param>
            <param name="action">The action.</param>
            <returns>Argument.</returns>
        </member>
        <member name="M:Arguments.FluentExtensions.AddArgument(Arguments.ArgumentProcessor,System.String[])">
            <summary>
            Adds an <see cref="T:Arguments.Argument" />.
            </summary>
            <param name="argumentProcessor">The <see cref="T:Arguments.ArgumentProcessor" /></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Arguments.FluentExtensions.AddArgument(Arguments.ArgumentProcessor)">
            <summary>
            Adds an <see cref="T:Arguments.Argument" />.
            </summary>
            <param name="argumentProcessor">The <see cref="T:Arguments.ArgumentProcessor" /></param>
            <returns></returns>
        </member>
        <member name="M:Arguments.FluentExtensions.AddArgument(Arguments.Argument,System.String[])">
            <summary>
            Adds an <see cref="T:Arguments.Argument" />.
            </summary>
            <param name="argument">The <see cref="T:Arguments.Argument" /></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Arguments.FluentExtensions.AddArgument(Arguments.Argument)">
            <summary>
            Adds an <see cref="T:Arguments.Argument" />.
            </summary>
            <param name="argument">The <see cref="T:Arguments.Argument" /></param>
            <returns></returns>
        </member>
        <member name="M:Arguments.FluentExtensions.Process(Arguments.Argument)">
            <summary>
            Process the <see cref="T:Arguments.ArgumentProcessor" />.
            </summary>
            <param name="argument">The <see cref="T:Arguments.Argument" /></param>
            <returns></returns>
        </member>
        <member name="M:Arguments.FluentExtensions.TerminateAfterExecution(Arguments.Argument)">
            <summary>
            Terminates after executing the current <see cref="T:Arguments.Argument" />.
            </summary>
            <param name="argument">The <see cref="T:Arguments.Argument" /></param>
            <returns></returns>
        </member>
        <member name="M:Arguments.FluentExtensions.UsingArgumentSeparators(Arguments.ArgumentProcessor,System.String[])">
            <summary>
            Uses the argument separators with the current <see cref="T:Arguments.ArgumentProcessor" />.
            </summary>
            <param name="argumentProcessor">The <see cref="T:Arguments.ArgumentProcessor" /></param>
            <param name="separators">The argument separators.</param>
            <returns></returns>
        </member>
        <member name="M:Arguments.FluentExtensions.UsingParameterSeparator(Arguments.ArgumentProcessor,System.Char)">
            <summary>
            Uses the parameter separator with the current <see cref="T:Arguments.ArgumentProcessor" />.
            </summary>
            <param name="argumentProcessor">The <see cref="T:Arguments.ArgumentProcessor" /></param>
            <param name="separator">The separator character.</param>
            <returns></returns>
        </member>
        <member name="M:Arguments.FluentExtensions.UsingSource(Arguments.ArgumentProcessor,System.String[])">
            <summary>
            Uses the source parameters with the current <see cref="T:Arguments.ArgumentProcessor" />.
            </summary>
            <param name="argumentProcessor">The <see cref="T:Arguments.ArgumentProcessor" /></param>
            <param name="source">The source arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Arguments.FluentExtensions.WithAction``1(Arguments.Argument,System.Action{``0,System.String},``0)">
            <summary>
            Sets the action of the current <see cref="T:Arguments.Argument" />.
            </summary>
            <typeparam name="TTarget">The type of the argument action target.</typeparam>
            <param name="argument">The <see cref="T:Arguments.Argument" /></param>
            <param name="action">The action to execute.</param>
            <param name="target">The target.</param>
            <returns>Argument.</returns>
        </member>
        <member name="M:Arguments.FluentExtensions.WithAction(Arguments.Argument,System.Action{System.String})">
            <summary>
            Sets the action of the current <see cref="T:Arguments.Argument" />.
            </summary>
            <param name="argument">The <see cref="T:Arguments.Argument" /></param>
            <param name="action">The action to execute.</param>
            <returns>Argument.</returns>
        </member>
        <member name="M:Arguments.FluentExtensions.WithFlags(Arguments.Argument,System.String[])">
            <summary>
            Sets the flags of the current <see cref="T:Arguments.Argument" />.
            </summary>
            <param name="argument">The <see cref="T:Arguments.Argument" /></param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="T:Arguments.IArgument">
            <summary>
            Interface for an individual argument.
            </summary>
        </member>
        <member name="P:Arguments.IArgument.Action">
            <summary>
            The action to perform when the argument is specified.
            </summary>
        </member>
        <member name="P:Arguments.IArgument.Flags">
            <summary>
            The possible flags used to denote the argument.
            </summary>
        </member>
        <member name="P:Arguments.IArgument.Target">
            <summary>
            Gets or sets the argument action target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Arguments.IArgument.TerminateAfterExecution">
            <summary>
            Determines if additional arguments should be processed if this argument is encountered and executed.
            </summary>
        </member>
    </members>
</doc>
